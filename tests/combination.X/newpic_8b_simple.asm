LIST P = PIC18F4321 F = INHX32
    #include <p18f4321.inc>
    CONFIG OSC = INTIO2
    CONFIG PBADEN = DIG
    CONFIG WDT = OFF
    
    readH EQU 0x01
    readL EQU 0x02
 
    position EQU 0x03
    flags EQU 0x04 ; 0 - joystick flag | 1 - manual mode (1 = java 0 = joy) | 2 - manual hit button pressed | 3 - mode (1 = automatic 0 = manual) |
 
    timeNoteL EQU 0x05 
    timeNoteH EQU 0x06
    
    TABLE7s EQU 0x10
 
    ORG TABLE7s
    ; C, D
    DB b'00111001', b'01011110'
    ; E, F
    DB b'01111001', b'01110001'
    ; G, A
    DB b'01101111', b'01110111'
    ; B, c
    DB b'01111100', b'01011000'
 
    ORG 0x0000
    GOTO MAIN
    ORG 0x0008
    GOTO HIGH_RSI
    ORG 0x0018
    RETFIE FAST
    
    
    
    CHANGE_MANUAL_MODE
	BCF INTCON3,INT1IF,0
	BTG flags,1,0
	;GOTO MANUAL_LOOP
	RETFIE FAST
	
    CHANGE_MODE
	BCF INTCON3,INT2IF,0
	BTG flags,3,0
	;GOTO MANUAL_LOOP
	RETFIE FAST
	
    HIGH_RSI
	BTFSC INTCON3,INT1IF,0
	GOTO CHANGE_MANUAL_MODE
	BTFSC INTCON3,INT2IF,0
	GOTO CHANGE_MODE
	RETFIE FAST
	
	
    INIT_INTERRUPTS
	; Configure RB1 so it generates a High Priority Interrupt 
        ; when a falling edge is detected.
	BCF RCON,IPEN,0 ; no priorities so everything is high priority
	BCF INTCON2,RBPU,0 ; enable pull ups
	BCF INTCON2,INTEDG1,0 ; falling edge int1
	BSF INTCON3, INT1IE,0 ; enable INT1 interrupt
	BSF INTCON3, INT2IE,0 ; enable INT1 interrupt
	BSF INTCON, 7,0; enable global interrupts
	BSF INTCON, 6,0;

	RETURN
    INIT_EUSART
	
	MOVLW b'00100100' ; SYNCH -0 BRGH - 1 
	MOVWF TXSTA,0
	MOVLW b'10010001'   ; RX9 - 0
	MOVWF RCSTA,0
	MOVLW b'01001000' ; BRG16 - 1
	MOVWF BAUDCON,0
	MOVLW .25       ; baud rate of 9600
	MOVWF SPBRG,0
	;MOVLW b'00000000'
	;MOVWF SPBRGH,0
	CLRF SPBRGH,0
	RETURN
    
    INIT_OSC
	MOVLW b'01000010'    ; 1MHz 1us
	MOVWF   OSCCON,0 
	RETURN
	
    INIT_TMR0
	MOVLW b'10011000' ; 16 bit timer - no prescaler 
	MOVWF T0CON,0
	RETURN
    INIT_PORTS
	MOVLW b'00000011'
	MOVWF ADCON0,0
	MOVLW b'00001110'
	MOVWF ADCON1,0
	MOVLW b'10001001'
	MOVWF ADCON2,0
	BSF TRISA,0,0
	CLRF TRISC,0
	BSF TRISC,6,0
	BSF TRISC,7,0
	CLRF TRISD,0
	RETURN

    READ_VALUE
	MOVFF ADRESH,readH
	MOVFF ADRESL,readL
	RETURN
	
    DISPLAY_NOTE
	MOVLW 0x10
	MOVWF TBLPTRL,0
	CLRF TBLPTRH,0
	CLRF TBLPTRU,0
	MOVLW position
	ADDWF TBLPTRL,0
	MOVFF TABLAT,LATD
	RETURN
	
    SET_NOTE_C
	MOVLW HIGH(.125)
	MOVWF timeNoteH,0
	MOVLW LOW(.125)
	MOVWF timeNoteL,0
	RETURN
	
    SET_NOTE_D
	MOVLW HIGH(.175)
	MOVWF timeNoteH,0
	MOVLW LOW(.175)
	MOVWF timeNoteL,0
	RETURN
    SET_NOTE_E
	MOVLW HIGH(.225)
	MOVWF timeNoteH,0
	MOVLW LOW(.225)
	MOVWF timeNoteL,0
	RETURN
	
    SET_NOTE_F
	MOVLW HIGH(.275)
	MOVWF timeNoteH,0
	MOVLW LOW(.275)
	MOVWF timeNoteL,0
	RETURN
    SET_NOTE_G
	MOVLW HIGH(.325)
	MOVWF timeNoteH,0
	MOVLW LOW(.325)
	MOVWF timeNoteL,0
	RETURN
    SET_NOTE_A
	MOVLW HIGH(.375)
	MOVWF timeNoteH,0
	MOVLW LOW(.375)
	MOVWF timeNoteL,0
	RETURN
    SET_NOTE_B
	MOVLW HIGH(.425)
	MOVWF timeNoteH,0
	MOVLW LOW(.425)
	MOVWF timeNoteL,0
	RETURN
	
    SET_NOTE_C2
	MOVLW HIGH(.475)
	MOVWF timeNoteH,0
	MOVLW LOW(.475)
	MOVWF timeNoteL,0
	RETURN
	
    High_PWM
	;MOVFF TMR0L,LATD
	MOVFF TMR0L,readL
	MOVFF TMR0H,readH
	MOVFF timeNoteH, WREG
	CPFSEQ readH,0
	GOTO High_PWM
	MOVFF timeNoteL, WREG
	CPFSGT readL,0
	GOTO High_PWM
	RETURN	
    MOVE_SERVO_X
	BCF INTCON, GIE ;disable interrupts
	
	CLRF TMR0H,0
	CLRF TMR0L,0
	BSF LATC,0,0
	CALL High_PWM
	
	TIME_AT_LOW_X
	BCF LATC,0,0
	MOVFF TMR0L,readL
	MOVFF TMR0H,readH
	MOVLW HIGH(.5000)
	CPFSGT readH,0
	GOTO TIME_AT_LOW_X
	MOVLW LOW(.5000)
	CPFSGT readL,0
	GOTO TIME_AT_LOW_X
	
	BTFSS flags,3,0 ; re-enable interrupts only when we are not playing a song through the automatic mode
	BSF INTCON, GIE ; re-enable interrupts
	RETURN
	
    MOVE_SERVO_Y
	BCF INTCON, GIE ;disable interrupts
	
	CLRF TMR0H,0
	CLRF TMR0L,0
	BSF LATC,1,0
	TIME_AT_HIGH_Y
	MOVFF TMR0L,readL
	MOVFF TMR0H,readH
	MOVFF timeNoteH, WREG
	CPFSEQ readH,0
	GOTO TIME_AT_HIGH_Y
	MOVFF timeNoteL, WREG
	CPFSGT readL,0
	GOTO TIME_AT_HIGH_Y
	
	TIME_AT_LOW_Y
	BCF LATC,1,0
	MOVFF TMR0L,readL
	MOVFF TMR0H,readH
	MOVLW HIGH(.5000)
	CPFSGT readH,0
	GOTO TIME_AT_LOW_Y
	MOVLW LOW(.5000)
	CPFSGT readL,0
	GOTO TIME_AT_LOW_Y
	
	BTFSS flags,3,0 ; re-enable interrupts only when we are not playing a song through the automatic mode
	BSF INTCON, GIE ; re-enable interrupts
	RETURN
	
    CHECK_LEFT
	
	; checking if < 100
	MOVLW .1
	CPFSLT readH,0
	RETURN
	MOVLW LOW(.100)
	CPFSLT readL,0
	RETURN
	; threshold for centre is left < 100
	
	MOVLW .0
	SUBWF position,0
	BTFSS STATUS,Z,0
	DECF position,1
	
	BSF flags,0,0
	
	CLRF timeNoteL,0
	CLRF timeNoteH,0
	CALL CONVERT_POS_TIME
	CALL MOVE_SERVO_X
	
	RETURN
	
    CHECK_RIGHT
	;checking if > 900
	MOVLW .2
	CPFSGT readH,0
	RETURN
	MOVLW LOW(.900)
	CPFSGT readL,0
	RETURN
	
	; threshold for centre is 900 < right
	
	MOVLW .7
	SUBWF position,0
	BTFSS STATUS,Z,0
	INCF position,1
	BSF flags,0,0
	
	CLRF timeNoteL,0
	CLRF timeNoteH,0
	CALL CONVERT_POS_TIME
	CALL MOVE_SERVO_X
	
	RETURN
	
    CHECK_CENTRE
	;checking if > 450
	MOVLW .1
	CPFSEQ readH,0
	GOTO check2
	MOVLW .200
	CPFSGT readL,0
	RETURN
	GOTO middle
	
	; checking if < 550
	check2
	MOVLW .2
	CPFSEQ readH,0
	RETURN
	MOVLW .50
	CPFSLT readL,0
	RETURN
	
	; threshold for centre is 450< centre <550
	middle
	BCF flags,0,0
	
	RETURN

	
    MAIN
	CALL INIT_OSC
	CALL INIT_PORTS
	CALL INIT_TMR0
	CALL INIT_INTERRUPTS
	CALL INIT_EUSART
	
	

	GOTO MAIN_LOOP
	
    MAIN_LOOP
	
	
	BTFSS flags,3,0
	CALL MANUAL_LOOP
	
	BTFSC flags,3,0
	CALL AUTOMATIC_LOOP
	
	GOTO MAIN_LOOP
	
    AUTOMATIC_LOOP
	BSF INTCON, GIE ; re-enable interrupts
	
	; setting the color of the RGB LED
	BCF LATC,3,0 
	BCF LATC,2,0
	BSF LATC,4,0
	
	WAIT_RX_AUTO
	    BTFSS flags,3,0
	    GOTO MAIN_LOOP
	    BTFSS PIR1, RCIF, 0
	    GOTO WAIT_RX_AUTO
	MOVFF RCREG,readL
	
	BTFSC RCSTA,OERR,0 
	CALL OVERRUN
	
	MOVLW 'P'
	SUBWF readL,0
	BTFSS STATUS,Z,0
	GOTO AUTOMATIC_LOOP
	
	MOVLW 'K'
	MOVWF TXREG
	WAIT_TRANS_AUTO
	    BTFSS TXSTA, 1, 0
	    GOTO WAIT_TRANS_AUTO
	    
	BCF INTCON, GIE ;disable interrupts
	
	WAIT_RX_AUTO_PLAY
	    BTFSS PIR1, RCIF, 0
	    GOTO WAIT_RX_AUTO_PLAY
	
	
	MOVFF RCREG,readL ; contains the letter sent by the java interface
	MOVLW 'S'
	SUBWF readL,0
	BTFSC STATUS,Z,0
	GOTO AUTOMATIC_LOOP
	
	BTFSC RCSTA,OERR,0 
	CALL OVERRUN
	
	
	CLRF timeNoteL,0
	CLRF timeNoteH,0
	CALL CONVERT_Letter_Pos
	
	CALL MOVE_SERVO_X

	CALL HIT_NOTE
	GOTO WAIT_RX_AUTO_PLAY
	RETURN
    MANUAL_LOOP
	; setting the color of the RGB LED
	BSF LATC,3,0
	BCF LATC,2,0
	BCF LATC,4,0
	
	BTFSS flags,1,0
	CALL MANUAL_JOYSTICK
	
	BTFSC flags,1,0
	CALL MANUAL_JAVA
	
	RETURN
	
    MANUAL_JOYSTICK
	BCF LATC,5,0
	
	
	
	BTFSC PORTB,0,0
	GOTO HIT_NOT_PRESSED
	
	BTFSC flags,2,0
	GOTO NO_HIT
	
	CALL HIT_NOTE
	BSF flags,2,0
	GOTO NO_HIT
	
	HIT_NOT_PRESSED
	BCF flags,2,0
	NO_HIT
        BSF ADCON0,1,0 ;convert
        JOYSTICK_INTERNAL_LOOP
	BTFSC ADCON0,1,0
	GOTO JOYSTICK_INTERNAL_LOOP
	
        CALL READ_VALUE
	CALL CHECK_CENTRE
	
	BTFSS flags,0,0
	CALL CHECK_LEFT
	
	BTFSS flags,0,0
	CALL CHECK_RIGHT
	
	
	RETURN
	
	
    	
    MANUAL_JAVA
	BSF LATC,5,0
	WAIT_RX_MAN
	    BTFSS flags,1,0
	    GOTO MANUAL_LOOP
	    BTFSS flags,3,0
	    GOTO MAIN_LOOP
	    BTFSS PIR1, RCIF, 0
	    GOTO WAIT_RX_MAN
	
	
	MOVFF RCREG,readL ; contains the letter sent by the java interface
	
	
	BTFSC RCSTA,OERR,0 
	CALL OVERRUN
	
	
	CLRF timeNoteL,0
	CLRF timeNoteH,0
	CALL CONVERT_Letter_Pos
	CALL CONVERT_POS_TIME
	CALL MOVE_SERVO_X

	CALL HIT_NOTE
	RETURN
	
    OVERRUN
	BCF RCSTA,CREN,0
	BSF CREN,0
	RETURN

    HIT_NOTE
	BCF INTCON, GIE ;disable interrupts
	CALL DISPLAY_NOTE
	;lower hit arm
	MOVLW HIGH(.475)
	MOVWF timeNoteH,0
	MOVLW LOW(.475)
	MOVWF timeNoteL,0
	
	CALL MOVE_SERVO_Y
	
	;raise hit arm
	MOVLW HIGH(.125)
	MOVWF timeNoteH,0
	MOVLW LOW(.125)
	MOVWF timeNoteL,0
	
	CALL MOVE_SERVO_Y
	BSF INTCON, GIE ; re-enable interrupts
	RETURN
	
	
    CONVERT_POS_TIME
	MOVLW .0
	SUBWF position,0
	BTFSC STATUS,Z,0
	CALL SET_NOTE_C
	
	MOVLW .1
	SUBWF position,0
	BTFSC STATUS,Z,0
	CALL SET_NOTE_D
	
	MOVLW .2
	SUBWF position,0
	BTFSC STATUS,Z,0
	CALL SET_NOTE_E
	
	MOVLW .3
	SUBWF position,0
	BTFSC STATUS,Z,0
	CALL SET_NOTE_F
	
	MOVLW .4
	SUBWF position,0
	BTFSC STATUS,Z,0
	CALL SET_NOTE_G
	
	MOVLW .5
	SUBWF position,0
	BTFSC STATUS,Z,0
	CALL SET_NOTE_A
	
	MOVLW .6
	SUBWF position,0
	BTFSC STATUS,Z,0
	CALL SET_NOTE_B
	
	MOVLW .7
	SUBWF position,0
	BTFSC STATUS,Z,0
	CALL SET_NOTE_C2
	RETURN
	
    CONVERT_Letter_Pos
	MOVLW 'C'	; proteus reads the eusart input as b'1111111' or .255
	SUBWF readL,0
	BTFSC STATUS,Z,0
	MOVLW .0
	MOVWF position
	
	MOVLW 'D'
	SUBWF readL,0
	BTFSC STATUS,Z,0
	MOVLW .1
	MOVWF position
	
	MOVLW 'E'
	SUBWF readL,0
	BTFSC STATUS,Z,0
	MOVLW .2
	MOVWF position
	
	MOVLW 'F'
	SUBWF readL,0
	BTFSC STATUS,Z,0
	MOVLW .3
	MOVWF position
	
	MOVLW 'G'
	SUBWF readL,0
	BTFSC STATUS,Z,0
	MOVLW .4
	MOVWF position
	
	MOVLW 'A'
	SUBWF readL,0
	BTFSC STATUS,Z,0
	MOVLW .5
	MOVWF position
	
	MOVLW 'B'
	SUBWF readL,0
	BTFSC STATUS,Z,0
	MOVLW .6
	MOVWF position
	
	MOVLW 'c'
	SUBWF readL,0
	BTFSC STATUS,Z,0
	MOVLW .7
	MOVWF position
	RETURN
END
    